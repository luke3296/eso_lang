BNF - plain

step 1 arithmatic

<digit> ::= [0-9]
<character> ::== [a-zA-Z]
<int> ::= <digit>|<int><digit>

<arithmetic-expression> ::=   <int> put with <int>
			  |   <int> take from <int>
			  |   <int> * <int>
			  |   <int> / <int>

step 2 other stuff

<string> ::= <character> <string>
           | <character> <int>

<statment> ::=  <assignment-statment>
	     |  <if-statement>
	     |  <while-statement>
	     |  <for-statement>

<statments> ::= <statment> <statment>


<expression> ::=  <arithmetic-expression>
	       |  <relational-expression>


<relational-expression> ::=  <int> smaller than <int>
			  |  <int> bigger than <int>
			  |  <int> smaller or of a count with <int>
			  |  <int> bigger or of a count with <int>
			  |  <int> of a count with <int>
			  |  <int> of a count or bigger than <int>
			  |  <int> of a count or smaller than <int>
				|  <int> not bigger than <int>
				|  <int> not smaller than <int>
				|  <int> not of a count with <int>


<varible> ::= <charactecter> <string>


<assignment-statement>  ::=   <varible> = <int>
	                |   <varible> = <string>



<if-statement> ::= Should the holde be full of <variable> ; <relational-statement> bolt the hatch before <statements> then drink our rum!
		 | Mayhaps it be full of <variable> ; <relational-expression> we bolt the hatch before <statement> then drink our rum!
		 | Should <statements> then drink our rum!

<while-statement> ::= When on watch with <relational-expression> keep an eye open and <statements> then drink our rum!

<for-statement>   ::= On each day that <assignment-statement> ; <relational-expression> ; <statements> ye shall be sure to <statements> then drink our rum!


<function>  ::=  define <string> {<statements>}
	      |      print( <string> )

#program1
<varible> = <string>
<varible> = <int>
while(<int> < <int>){if( <int> > <int> ) { print( <string> )}}
#program2
define <string> { print(<string>) }
for( <varible> = <int> ; <varible> < <int> ; <varible> = <int> ) { <string> }
# where string would be the name of the function
