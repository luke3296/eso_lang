BNF - plain

step 1 arithmatic

<digit> ::= [0-9]
<character> ::== [a-zA-Z]
<int> ::= <digit>|<int><digit>

<arithmetic-expression> ::=   <int> + <int>
			  |   <int> - <int>
			  |   <int> * <int>
			  |   <int> / <int>

step 2 other stuff

<string> ::= <character> <string>
           | <character> <int>

<statment> ::=  <assignment-statment>
	     |  <if-statement>
	     |  <while-statement>
	     |  <for-statement>

<statments> ::= <statment> <statment>


<expression> ::=  <arithmetic-expression>
	       |  <relational-expression>


<relational-expression> ::=  <int> < <int>
			  |  <int> > <int>
			  |  <int> <= <int>
			  |  <int> >= <int>
			  |  <int> == <int>
			  |  <int> => <int>
			  |  <int> =< <int
				|  <int> !< <int>
				|  <int> <> <int>


<varible> ::= <charactecter> <string>


<assignment-statmen>  ::=   <varible> = <int>
	                |   <varible> = <string>



<if-statement> ::= Should the holde be full of <condtional-expression> well sell it at <statements> then drink our rum!
		 | or perhaps be full of <condtional-expression> well sell it at <statment> then drink our rum!
		 | should it not be full <statments> then drink our rum!

<while-statement> ::= while(<relational-expression>){<statements>}

<for-statement>   ::= for ( <assignment-statment> ; <condtional-expression> ; <statments> ) { <statements> }


<function>  ::=  define <string> {<statements>}
	      |      print( <string> )

#program1
<varible> = <string>
<varible> = <int>
while(<int> < <int>){if( <int> > <int> ) { print( <string> )}}
#program2
define <string> { print(<string>) }
for( <varible> = <int> ; <varible> < <int> ; <varible> = <int> ) { <string> }
# where string would be the name of the function
